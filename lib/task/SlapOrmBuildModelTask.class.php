<?php

class SlapOrmBuildModelTask extends SlapOrmBaseTask
{
  protected $schema;

  public function configure()
  {
    parent::configure();
    $this->name             = 'build-model';
    $this->briefDescription = 'Generate LDAP model classes based on the schema definition';
    $this->detailedDescription = <<<EOF
The [slaporm::build-model|INFO] generates your model class files based on the definition given in config/slapOrm/schema.yml

Call it with:

  [php symfony slaporm::build-model|INFO]
EOF;
  }

  protected function execute($arguments = array(), $options = array())
  {
    $this->schema = $this->getSchema();
    foreach(array_keys($this->schema) as $class)
    {
      $this->generateClassesFor($class);
    }
  }


  protected function filesAlreadyExistFor($class_name)
  {
    return
      (
        file_exists($this->getPath().'/'.$class_name.'.class.php')
      and
        file_exists($this->getPath().'/'.$class_name.'Map.class.php')
      );
  }

  public function generateUserClassesFor($class_name)
  {
    $this->log(sprintf('Creating user model files for class "%s"', $class_name));
    $version = SlapOrm::VERSION;
    $code = <<<EOF
<?php
 /*
  * SlapOrm version $version
  */
class ${class_name} extends LdapObject
{
}
EOF;
    $this->createFile($class_name.'.class.php', $code);
    $code =<<<EOF
<?php
 /*
  * SlapOrm version $version
  */
class ${class_name}Map extends Base${class_name}Map
{
}
EOF;
    $this->createFile($class_name.'Map.class.php', $code);
  }

  protected function generateBaseClassesFor($class_name)
  {
    $this->log(sprintf('Creating base model file for class "%s"', $class_name));
    $attributes = '\''.join('\', \'', array_keys($this->schema[$class_name]['attributes'])).'\'';
    $fields = $this->generateFieldsCode($class_name);
    $object_class = "array('".join("', '", $this->schema[$class_name]['objectClass'])."');";
    $dn = $this->schema[$class_name]['dn'];
    $rdn = $this->schema[$class_name]['rdn'];
    $version = SlapOrm::VERSION;
    $code = <<<EOF
<?php
  /*
 * This file has been automatically generated by SlapOrm
 * DO NOT EDIT THIS FILE as the next slaporm::build-model
 * will overwrite this file again
 *
 * SlapOrm version $version
 */
abstract class Base${class_name}Map extends LdapTransport
{
  protected \$base_dn = "$dn";
  protected \$attributes = array($attributes);
  protected \$object_class = $object_class
  protected \$rdn = '$rdn';

  public function configure()
  {
$fields
  }

  public function getClassName()
  {
    return '${class_name}';
  }

  public function getRdnField()
  {
    return \$this->rdn;
  }
}
EOF;
    $this->createFile('base/Base'.$class_name.'Map.class.php', $code);
  }

  protected function generateFieldsCode($class_name)
  {
    $fields = "";
    foreach ($this->schema[$class_name]['attributes'] as $field_name => $parameters)
    {
      $fields .= sprintf('    $this->fields[\'%s\'] = new Ldap%sField(%s);', strtolower($field_name), sfInflector::camelize($parameters['type']), $this->convertArrayInPhp($parameters));
      $fields .= "\n";
    }

    return $fields;
  }

  protected function convertArrayInPhp(array $array)
  {
    $fields = "array(";
    foreach($array as $key => $value)
    {
      switch(strtolower(gettype($value)))
      {
      case "boolean":
        $value = $value ? 'true' : 'false';
      case "integer":
        $fields .= "'$key' => $value,";
        break;
      default:
        $fields .= "'$key' => '$value',";
      }
    }
    $fields .= ')';

    return $fields;
  }

  protected function getPath()
  {
    return sfConfig::get('sf_lib_dir').'/model/slapOrm';
  }
}
