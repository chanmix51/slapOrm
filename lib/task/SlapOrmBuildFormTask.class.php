<?php

class SlapOrmBuildFormTask extends SlapOrmBaseTask
{
  public function configure()
  {
    parent::configure();
    $this->name             = 'build-form';
    $this->briefDescription = 'Generate forms associated to the LDAP model classes';
    $this->detailedDescription = <<<EOF
The [slaporm::build-form|INFO] generates your form class files based on the BaseMap classes

Call it with:
  [php symfony slaporm::build-form|INFO]
EOF;
  }

  protected function execute($arguments = array(), $options = array())
  {
    $this->generateGlobalBaseFormIfNeeded();

    $classes = array_keys($this->getSchema());

    foreach ($classes as $class)
    {
      $this->generateClassesFor($class);
    }
  }

  protected function filesAlreadyExistFor($class_name)
  {
    return file_exists($this->getPath().'/'.$class_name.'Form.class.php');
  } 

  protected function generateUserClassesFor($class_name)
  {
    $this->log(sprintf('Creating user form files for class "%s"', $class_name));
    $version = SlapOrm::VERSION;
    $code = <<<EOF
<?php
 /*
  * SlapOrm version $version
  */
class ${class_name}Form extends Base${class_name}Form
{
}
EOF;

    $this->createFile($class_name.'Form.class.php', $code);
  }

  protected function generateBaseClassesFor($class_name)
  {
    $this->log(sprintf('Creating base form file for class "%s"', $class_name));
    $instance = SlapOrm::getMapInstanceOf($class_name);

    $widgets = '';
    $validators = '';
    $form_value = sfInflector::underscore($class_name);

    foreach ($instance->getFields() as $name => $field)
    {
      $widgets .= sprintf("      '%s' => %s,\n", $name, $field->getWidget());
      $validators .= sprintf("      '%s' => %s,\n", $name, $field->getValidator());
    }

    $version = SlapOrm::VERSION;
    $code = <<<EOF
<?php
  /*
 * This file has been automatically generated by SlapOrm
 * DO NOT EDIT THIS FILE as the next slaporm::build-form
 * will overwrite this file again
 *
 * SlapOrm version $version
 */

abstract class Base${class_name}Form extends BaseFormSlapOrm
{
  public function setup()
  {
    \$this->setWidgets(array(
$widgets
      ));

    \$this->setValidators(array(
$validators
      ));
    \$this->widgetSchema->setNameFormat('${form_value}[%s]');

    \$this->errorSchema = new sfValidatorErrorSchema(\$this->validatorSchema);

    parent::setup();
  }

  protected function getModelName()
  {
    return '$class_name';
  }
}
EOF;
    $this->createFile('base/Base'.$class_name.'Form.class.php', $code);
  }

  protected function getPath()
  {
    return sfConfig::get('sf_lib_dir').'/form/slapOrm';
  }

  protected function generateGlobalBaseFormIfNeeded()
  {
    $file_name = $this->getPath().'/BaseFormSlapOrm.class.php';
    if (file_exists($file_name)) return;

    $this->log('Creating user base class for all forms');
    $version = SlapOrm::VERSION;
    $code = <<<EOF
<?php
 /*
  * SlapOrm version $version
  */
abstract class BaseFormSlapOrm extends sfFormSlapOrm
{
  public function setup()
  {
  }
}
EOF;
    $this->createFile('BaseFormSlapOrm.class.php', $code);
  }

}
